// Execute Tasks in SubModule: gradle MODUL:clean build
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath("de.freese.gradle:gradle-plugins:$version_myConventionPlugin")
        classpath("io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$version_springBoot")
    }
}

subprojects {
    apply plugin: "java"
//    apply plugin: "maven-publish"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("commons-cli:commons-cli:$version_commonsCli")
        }
    }

//    dependencies {
//        testImplementation("org.junit.jupiter:junit-jupiter")
//        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
//    }
}

project("jsync-core") {
    apply plugin: "java-library"
    description = "A Java rsync clone: Core Module"
    dependencies {
        api("io.projectreactor:reactor-core")
        api("org.slf4j:slf4j-api")
    }
}

project("jsync-console") {
    description = "A Java rsync clone: Console Module"
    dependencies {
        implementation(project(":jsync-core"))

        implementation("commons-cli:commons-cli")

        runtimeOnly("org.slf4j:slf4j-nop")
    }
}

project("jsync-remote-rsocket") {
    apply plugin: "java-library"
    description = "A Java rsync clone: RSocket Module"
    dependencies {
        api(project(":jsync-core"))

        api("io.rsocket:rsocket-transport-local")
        api("io.rsocket:rsocket-transport-netty")
    }
}

project("jsync-remote-rsocket-server") {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    description = "A Java rsync clone: RSocket-Server Module"
    dependencies {
        api(project(":jsync-remote-rsocket"))

        runtimeOnly("ch.qos.logback:logback-classic")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.jsync.rsocket.server.JSyncRSocketServer"
    }
    // gradle bootRun --args="--spring.profiles.active=Server,HsqldbEmbeddedServer --server.port=65111"
    // gradle bootRun Dspring-boot.run.arguments="65111"
    bootRun {
        args = [65111]
        jvmArgs = ["-Xms32m", "-Xmx512m", "-XX:TieredStopAtLevel=1", "-Djava.security.egd=file:/dev/./urandom"]
        // -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
    }
}

project("jsync-remote-nio") {
    apply plugin: "java-library"
    description = "A Java rsync clone: NIO Module"
    dependencies {
        api(project(":jsync-core"))
    }
}

project("jsync-remote-nio-server") {
    apply plugin: "java-library"
    description = "A Java rsync clone: NIO-Server Module"
    dependencies {
        api(project(":jsync-remote-nio"))

        runtimeOnly("ch.qos.logback:logback-classic")
    }
}

project("jsync-swing") {
    apply plugin: "org.springframework.boot"
    description = "A Java rsync clone: Swing-GUI"
    dependencies {
        implementation(project(":jsync-remote-rsocket"))
        implementation(project(":jsync-remote-nio"))

        runtimeOnly("ch.qos.logback:logback-classic")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.jsync.swing.JSyncSwingLauncher"
    }
    // gradle bootRun --args="--spring.profiles.active=Server,HsqldbEmbeddedServer --server.port=65111"
    // gradle bootRun Dspring-boot.run.arguments="65111"
    bootRun {
//        args = [
//                "--spring.profiles.active=Server,HsqldbEmbeddedServer"
//                , "--server.port=65111"
//        ]
        jvmArgs = ["-Xms32m", "-Xmx512m", "-XX:TieredStopAtLevel=1", "-Djava.security.egd=file:/dev/./urandom"]
        // -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
    }
}

project("jsync-test") {
    description = "A Java rsync clone: Test Module"
    dependencies {
        testImplementation(project(":jsync-remote-rsocket-server"))
        testImplementation(project(":jsync-remote-nio-server"))

        testImplementation("io.projectreactor:reactor-test")
        testImplementation("org.junit.jupiter:junit-jupiter")

        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }
//    test {
//        maxParallelForks = 1 // Will not do parallel execution
//    }
}
